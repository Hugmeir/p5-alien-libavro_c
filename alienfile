use alienfile;
use strict;
use Env qw/@PKG_CONFIG_PATH/;
use File::Spec;
use Alien::libjansson;
use Alien::libsnappy;

sub update_pkg_conf_path {
    # avro-c.pc has jansson as a dependency, so it won't be loaded
    # *at all* unless we have jansson.pc in the PKG_CONFIG_PATH
    # somewhere.  And if libjansson is coming from Alien::libjansson,
    # we MUST set this up here, otherwise the PkgConfig plugin
    # will never be able to use avro-c.pc
    require File::Spec;

    push @PKG_CONFIG_PATH,
        map File::Spec->catdir($_->dist_dir,  'lib', 'pkgconfig'),
        grep $_->install_type eq 'share',
        qw/
            Alien::libsnappy
            Alien::libjansson
        /,
    ;
    return;
}

# POS
update_pkg_conf_path();

sys {
# And then try with Probe::CBuilder:
plugin 'Probe::CBuilder' => (
  libs    => '-lavro',
  program => q{
#include <stdio.h>
#include <avro.h>
#include <avro/errors.h>

int main() {
    avro_schema_t schema = avro_schema_string();
    if ( schema == NULL ) {
        printf("ERROR: %s\n", avro_strerror());
    }
    else {
        printf("Success!\n");
    }
    return 0;
}
},
);
};

# Try probing with pkg-config, but at least on
# OSX the provided avro-c.pc file has some broken
# entries, so this always fails:
plugin 'PkgConfig' => (
    pkg_name        => 'avro-c',
);

share {
    plugin 'PkgConfig' => (
        pkg_name        => 'avro-c',
    );

    require Config;
    require Alien::libjansson;
    require Alien::libsnappy;

    plugin Download => (
        url     => 'https://github.com/apache/avro/archive/release-1.10.0.tar.gz',
        version => qr/release-([0-9\.]+)\.tar\.gz$/,
    );

    plugin Extract => 'tar.gz';

    patch [
        '%{patch} -p1 < %{.install.patch}/0001-lang-c-pkg-config-put-lsnappy-ljansson-etc-in-Libs.p.patch',
        '%{patch} -p1 < %{.install.patch}/0002-lang-c-cmake-option-to-skip-building-the-tests.patch',
        '%{patch} -p1 < %{.install.patch}/0003-lang-c-snappy-has-no-pkg-config-entry.patch',
        '%{patch} -p1 < %{.install.patch}/0004-lang-c-fix-pkg-config-Requires.patch',
        '%{patch} -p1 < %{.install.patch}/0005-lang-c-include-jansson-in-the-pkg-config-Requires-se.patch',
        '%{patch} -p1 < %{.install.patch}/0006-lang-c-fix-the-pkg-config-name-for-jansson-no-lib-pr.patch',
    ];

    plugin 'Build::CMake' => ();
    build [
        \&update_pkg_conf_path,
        'cd %{.install.extract}/lang/c',
        [
            '%{cmake}' => '.',
                '-DCMAKE_C_FLAGS=' . Alien::libsnappy->cflags,
                (
                    # when libsnappy was built by Alien::libsnappy,
                    # we need to point -DSNAPPY_ROOT_DIR to Alien's
                    # installation:
                    Alien::libsnappy->install_type eq 'share'
                        ? '-DSNAPPY_ROOT_DIR:PATH=' . Alien::libsnappy->dist_dir
                        : ()
                ),
                '-DCMAKE_BUILD_TYPE=RelWithDebInfo',
                '-DAVRO_SKIP_BUILD_TESTS:BOOL=true',
                @{ meta->prop->{plugin_build_cmake}->{args} },
                '%{.install.extract}/lang/c',
        ],
        [
            '%{make}',
                '-C' => '%{.install.extract}/lang/c',
        ],
        [
            '%{make}',
                '-C' => '%{.install.extract}/lang/c',
                'install',
        ],
    ];
};

meta->after_hook(
    'gather_system' => sub {
        # the joy of using multiple hooks...
        # if we are using the system libraries, we need to manually add -lavro into the libs
        my ($build) = @_;
        my $install_prop    = $build->{install_prop} // {}; # make sure not to vivify this!
        my $cbuilder_gather = $install_prop->{plugin_probe_cbuilder_gather} // {};
        foreach my $entry ( keys %$cbuilder_gather ) {
            $build->{runtime_prop}->{$entry} ||= $cbuilder_gather->{$entry};
        }
    }
);

